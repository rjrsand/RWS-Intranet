{"version":3,"sources":["vendor/markerclusterer.js","components/googleMaps.js","components/googleMapsMarker.js"],"names":["MarkerClusterer","map","opt_markers","opt_options","this","extend","google","maps","OverlayView","map_","markers_","clusters_","sizes","styles_","ready_","options","gridSize_","minClusterSize_","maxZoom_","imagePath_","MARKER_CLUSTER_IMAGE_PATH_","imageExtension_","MARKER_CLUSTER_IMAGE_EXTENSION_","zoomOnClick_","undefined","averageCenter_","setupStyles_","setMap","prevZoom_","getZoom","that","event","addListener","zoom","minZoom","maxZoom","Math","min","mapTypes","getMapTypeId","max","resetViewport","redraw","length","Object","keys","addMarkers","Cluster","markerClusterer","markerClusterer_","getMap","getGridSize","getMinClusterSize","isAverageCenter","center_","bounds_","clusterIcon_","ClusterIcon","getStyles","cluster","styles","opt_padding","getMarkerClusterer","padding_","cluster_","div_","sums_","visible_","prototype","obj1","obj2","object","property","apply","onAdd","setReady_","draw","size","i","push","url","height","width","fitMapToMarkers","marker","markers","getMarkers","bounds","LatLngBounds","getPosition","fitBounds","setStyles","isZoomOnClick","getTotalMarkers","setMaxZoom","getMaxZoom","calculator_","numStyles","index","count","dv","parseInt","text","setCalculator","calculator","getCalculator","opt_nodraw","pushMarkerTo_","isAdded","repaint","addMarker","removeMarker_","indexOf","m","splice","removeMarker","removed","removeMarkers","markersCopy","slice","r","ready","createClusters_","getTotalClusters","setGridSize","setMinClusterSize","getExtendedBounds","projection","getProjection","tr","LatLng","getNorthEast","lat","lng","bl","getSouthWest","trPix","fromLatLngToDivPixel","x","y","blPix","ne","fromDivPixelToLatLng","sw","isMarkerInBounds_","contains","clearMarkers","opt_hide","remove","oldClusters","window","setTimeout","distanceBetweenPoints_","p1","p2","dLat","PI","dLon","a","sin","cos","atan2","sqrt","addToClosestCluster_","distance","clusterToAddTo","center","getCenter","d","isMarkerInClusterBounds","mapBounds","getBounds","isMarkerAlreadyAdded","l","calculateBounds_","len","updateIcon","getSize","mz","hide","sums","setCenter","setSums","show","triggerClusterClick","trigger","document","createElement","pos","getPosFromLatLng_","style","cssText","createCss","innerHTML","getPanes","overlayMouseTarget","appendChild","addDomListener","latlng","width_","height_","top","left","display","onRemove","parentNode","removeChild","text_","index_","useStyle","url_","textColor_","anchor_","textSize_","backgroundPosition_","backgroundPosition","txtColor","txtSize","join","o","result","name","hasOwnProperty","dmx","Component","initialData","maptype","latitude","longitude","attributes","type","String","Number","default","address","enum","scrollwheel","Boolean","tilt","rotateControl","scaleControl","fullscreenControl","zoomControl","streetviewControl","maptypeControl","enableClusters","trafficLayer","transitLayer","bicyclingLayer","Array","markerId","markerLatitude","markerLongitude","markerAddress","markerLabel","markerLabelColor","markerTitle","markerInfo","markerType","markerImage","markerAnimation","markerDraggable","clusterGridSize","clusterMaxZoom","minClusterSize","methods","_addMarker","_cluster","props","_map","goToMarker","id","_findMarker","position","panToMarker","panTo","bounceMarker","setAnimation","stopBounce","showInfo","info","_openInfoWindow","fitBoundsToMarkers","_markers","removeAllMarkers","_removeAllMarkers","setMapType","setMapTypeId","setZoom","refresh","reload","_relaod","events","Event","boundschanged","centerchanged","maptypechanged","zoomchanged","mapclick","markerclick","markerpositionchanged","init","markerUrl","iconsUrl","_geocodeCache","JSON","parse","localStorage","geocodeCache","_geocoder","Geocoder","_infoWindow","InfoWindow","_markerTypes","black","grey","orange","white","yellow","purple","green","start","end","tree","lodging","bar","restaurant","horsebackriding","convienancestore","hiker","swimming","fishing","golfer","sportvenue","_clickHandler","bind","_boundsHandler","debounce","_centerHandler","_maptypeHandler","_zoomHandler","render","node","$parse","setProperty","_getSize","Map","mapTypeId","panControl","streetViewControl","mapTypeControl","googleMapsTheme","setOptions","setTilt","_getMarkers","imagePath","_getImageFolder","gridSize","minimumClusterSize","_geocode","_trafficLayer","TrafficLayer","_transitLayer","TransitLayer","_bikeLayer","BicyclingLayer","set","dispatchEvent","performUpdate","updatedProps","has","repeatItems","isArray","scope","DataScope","parent","label","labelColor","title","image","animation","draggable","destroy","_reload","script","querySelector","src","replace","_getMarkerAnimation","toLowerCase","geocode","results","status","geometry","location","stringify","console","warn","content","setContent","open","child","children","_marker","static","animations","find","Marker","icon","setIcon","setLabel","color","e","setPosition","setVisible","_markerClickHandler","_markerPositionHandler","filter","clearInstanceListeners","latLng","toJSON","setTitle","infoWindow","setDraggable"],"mappings":"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","file":"dmxGoogleMaps.js","sourcesContent":["// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3_3.js\n// ==/ClosureCompiler==\n\n/**\n * @name MarkerClusterer for Google Maps v3\n * @version version 1.0.1\n * @author Luke Mahe\n * @fileoverview\n * The library creates and manages per-zoom-level clusters for large amounts of\n * markers.\n * <br/>\n * This is a v3 implementation of the\n * <a href=\"http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/\"\n * >v2 MarkerClusterer</a>.\n */\n\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A Marker Clusterer that clusters markers.\n *\n * @param {google.maps.Map} map The Google map to attach to.\n * @param {Array.<google.maps.Marker>=} opt_markers Optional markers to add to\n *   the cluster.\n * @param {Object=} opt_options support the following options:\n *     'gridSize': (number) The grid size of a cluster in pixels.\n *     'maxZoom': (number) The maximum zoom level that a marker can be part of a\n *                cluster.\n *     'zoomOnClick': (boolean) Whether the default behaviour of clicking on a\n *                    cluster is to zoom into it.\n *     'imagePath': (string) The base URL where the images representing\n *                  clusters will be found. The full URL will be:\n *                  {imagePath}[1-5].{imageExtension}\n *                  Default: '../images/m'.\n *     'imageExtension': (string) The suffix for images URL representing\n *                       clusters will be found. See _imagePath_ for details.\n *                       Default: 'png'.\n *     'averageCenter': (boolean) Whether the center of each cluster should be\n *                      the average of all markers in the cluster.\n *     'minimumClusterSize': (number) The minimum number of markers to be in a\n *                           cluster before the markers are hidden and a count\n *                           is shown.\n *     'styles': (object) An object that has style properties:\n *       'url': (string) The image url.\n *       'height': (number) The image height.\n *       'width': (number) The image width.\n *       'anchor': (Array) The anchor position of the label text.\n *       'textColor': (string) The text color.\n *       'textSize': (number) The text size.\n *       'backgroundPosition': (string) The position of the backgound x, y.\n * @constructor\n * @extends google.maps.OverlayView\n */\nfunction MarkerClusterer(map, opt_markers, opt_options) {\n  // MarkerClusterer implements google.maps.OverlayView interface. We use the\n  // extend function to extend MarkerClusterer with google.maps.OverlayView\n  // because it might not always be available when the code is defined so we\n  // look for it at the last possible moment. If it doesn't exist now then\n  // there is no point going ahead :)\n  this.extend(MarkerClusterer, google.maps.OverlayView);\n  this.map_ = map;\n\n  /**\n   * @type {Array.<google.maps.Marker>}\n   * @private\n   */\n  this.markers_ = [];\n\n  /**\n   *  @type {Array.<Cluster>}\n   */\n  this.clusters_ = [];\n\n  this.sizes = [53, 56, 66, 78, 90];\n\n  /**\n   * @private\n   */\n  this.styles_ = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.ready_ = false;\n\n  var options = opt_options || {};\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.gridSize_ = options['gridSize'] || 60;\n\n  /**\n   * @private\n   */\n  this.minClusterSize_ = options['minimumClusterSize'] || 2;\n\n\n  /**\n   * @type {?number}\n   * @private\n   */\n  this.maxZoom_ = options['maxZoom'] || null;\n\n  this.styles_ = options['styles'] || [];\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.imagePath_ = options['imagePath'] ||\n      this.MARKER_CLUSTER_IMAGE_PATH_;\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.imageExtension_ = options['imageExtension'] ||\n      this.MARKER_CLUSTER_IMAGE_EXTENSION_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.zoomOnClick_ = true;\n\n  if (options['zoomOnClick'] != undefined) {\n    this.zoomOnClick_ = options['zoomOnClick'];\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.averageCenter_ = false;\n\n  if (options['averageCenter'] != undefined) {\n    this.averageCenter_ = options['averageCenter'];\n  }\n\n  this.setupStyles_();\n\n  this.setMap(map);\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevZoom_ = this.map_.getZoom();\n\n  // Add the map event listeners\n  var that = this;\n  google.maps.event.addListener(this.map_, 'zoom_changed', function() {\n    // Determines map type and prevent illegal zoom levels\n    var zoom = that.map_.getZoom();\n    var minZoom = that.map_.minZoom || 0;\n    var maxZoom = Math.min(that.map_.maxZoom || 100,\n                         that.map_.mapTypes[that.map_.getMapTypeId()].maxZoom);\n    zoom = Math.min(Math.max(zoom,minZoom),maxZoom);\n\n    if (that.prevZoom_ != zoom) {\n      that.prevZoom_ = zoom;\n      that.resetViewport();\n    }\n  });\n\n  google.maps.event.addListener(this.map_, 'idle', function() {\n    that.redraw();\n  });\n\n  // Finally, add the markers\n  if (opt_markers && (opt_markers.length || Object.keys(opt_markers).length)) {\n    this.addMarkers(opt_markers, false);\n  }\n}\n\n\n/**\n * The marker cluster image path.\n *\n * @type {string}\n * @private\n */\nMarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_ = '../images/m';\n\n\n/**\n * The marker cluster image path.\n *\n * @type {string}\n * @private\n */\nMarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_ = 'png';\n\n\n/**\n * Extends a objects prototype by anothers.\n *\n * @param {Object} obj1 The object to be extended.\n * @param {Object} obj2 The object to extend with.\n * @return {Object} The new extended object.\n * @ignore\n */\nMarkerClusterer.prototype.extend = function(obj1, obj2) {\n  return (function(object) {\n    for (var property in object.prototype) {\n      this.prototype[property] = object.prototype[property];\n    }\n    return this;\n  }).apply(obj1, [obj2]);\n};\n\n\n/**\n * Implementaion of the interface method.\n * @ignore\n */\nMarkerClusterer.prototype.onAdd = function() {\n  this.setReady_(true);\n};\n\n/**\n * Implementaion of the interface method.\n * @ignore\n */\nMarkerClusterer.prototype.draw = function() {};\n\n/**\n * Sets up the styles object.\n *\n * @private\n */\nMarkerClusterer.prototype.setupStyles_ = function() {\n  if (this.styles_.length) {\n    return;\n  }\n\n  for (var i = 0, size; size = this.sizes[i]; i++) {\n    this.styles_.push({\n      url: this.imagePath_ + (i + 1) + '.' + this.imageExtension_,\n      height: size,\n      width: size\n    });\n  }\n};\n\n/**\n *  Fit the map to the bounds of the markers in the clusterer.\n */\nMarkerClusterer.prototype.fitMapToMarkers = function() {\n  var markers = this.getMarkers();\n  var bounds = new google.maps.LatLngBounds();\n  for (var i = 0, marker; marker = markers[i]; i++) {\n    bounds.extend(marker.getPosition());\n  }\n\n  this.map_.fitBounds(bounds);\n};\n\n\n/**\n *  Sets the styles.\n *\n *  @param {Object} styles The style to set.\n */\nMarkerClusterer.prototype.setStyles = function(styles) {\n  this.styles_ = styles;\n};\n\n\n/**\n *  Gets the styles.\n *\n *  @return {Object} The styles object.\n */\nMarkerClusterer.prototype.getStyles = function() {\n  return this.styles_;\n};\n\n\n/**\n * Whether zoom on click is set.\n *\n * @return {boolean} True if zoomOnClick_ is set.\n */\nMarkerClusterer.prototype.isZoomOnClick = function() {\n  return this.zoomOnClick_;\n};\n\n/**\n * Whether average center is set.\n *\n * @return {boolean} True if averageCenter_ is set.\n */\nMarkerClusterer.prototype.isAverageCenter = function() {\n  return this.averageCenter_;\n};\n\n\n/**\n *  Returns the array of markers in the clusterer.\n *\n *  @return {Array.<google.maps.Marker>} The markers.\n */\nMarkerClusterer.prototype.getMarkers = function() {\n  return this.markers_;\n};\n\n\n/**\n *  Returns the number of markers in the clusterer\n *\n *  @return {Number} The number of markers.\n */\nMarkerClusterer.prototype.getTotalMarkers = function() {\n  return this.markers_.length;\n};\n\n\n/**\n *  Sets the max zoom for the clusterer.\n *\n *  @param {number} maxZoom The max zoom level.\n */\nMarkerClusterer.prototype.setMaxZoom = function(maxZoom) {\n  this.maxZoom_ = maxZoom;\n};\n\n\n/**\n *  Gets the max zoom for the clusterer.\n *\n *  @return {number} The max zoom level.\n */\nMarkerClusterer.prototype.getMaxZoom = function() {\n  return this.maxZoom_;\n};\n\n\n/**\n *  The function for calculating the cluster icon image.\n *\n *  @param {Array.<google.maps.Marker>} markers The markers in the clusterer.\n *  @param {number} numStyles The number of styles available.\n *  @return {Object} A object properties: 'text' (string) and 'index' (number).\n *  @private\n */\nMarkerClusterer.prototype.calculator_ = function(markers, numStyles) {\n  var index = 0;\n  var count = markers.length;\n  var dv = count;\n  while (dv !== 0) {\n    dv = parseInt(dv / 10, 10);\n    index++;\n  }\n\n  index = Math.min(index, numStyles);\n  return {\n    text: count,\n    index: index\n  };\n};\n\n\n/**\n * Set the calculator function.\n *\n * @param {function(Array, number)} calculator The function to set as the\n *     calculator. The function should return a object properties:\n *     'text' (string) and 'index' (number).\n *\n */\nMarkerClusterer.prototype.setCalculator = function(calculator) {\n  this.calculator_ = calculator;\n};\n\n\n/**\n * Get the calculator function.\n *\n * @return {function(Array, number)} the calculator function.\n */\nMarkerClusterer.prototype.getCalculator = function() {\n  return this.calculator_;\n};\n\n\n/**\n * Add an array of markers to the clusterer.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to add.\n * @param {boolean=} opt_nodraw Whether to redraw the clusters.\n */\nMarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) {\n  if (markers.length) {\n    for (var i = 0, marker; marker = markers[i]; i++) {\n      this.pushMarkerTo_(marker);\n    }\n  } else if (Object.keys(markers).length) {\n    for (var marker in markers) {\n      this.pushMarkerTo_(markers[marker]);\n    }\n  }\n  if (!opt_nodraw) {\n    this.redraw();\n  }\n};\n\n\n/**\n * Pushes a marker to the clusterer.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @private\n */\nMarkerClusterer.prototype.pushMarkerTo_ = function(marker) {\n  marker.isAdded = false;\n  if (marker['draggable']) {\n    // If the marker is draggable add a listener so we update the clusters on\n    // the drag end.\n    var that = this;\n    google.maps.event.addListener(marker, 'dragend', function() {\n      marker.isAdded = false;\n      that.repaint();\n    });\n  }\n  this.markers_.push(marker);\n};\n\n\n/**\n * Adds a marker to the clusterer and redraws if needed.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @param {boolean=} opt_nodraw Whether to redraw the clusters.\n */\nMarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) {\n  this.pushMarkerTo_(marker);\n  if (!opt_nodraw) {\n    this.redraw();\n  }\n};\n\n\n/**\n * Removes a marker and returns true if removed, false if not\n *\n * @param {google.maps.Marker} marker The marker to remove\n * @return {boolean} Whether the marker was removed or not\n * @private\n */\nMarkerClusterer.prototype.removeMarker_ = function(marker) {\n  var index = -1;\n  if (this.markers_.indexOf) {\n    index = this.markers_.indexOf(marker);\n  } else {\n    for (var i = 0, m; m = this.markers_[i]; i++) {\n      if (m == marker) {\n        index = i;\n        break;\n      }\n    }\n  }\n\n  if (index == -1) {\n    // Marker is not in our list of markers.\n    return false;\n  }\n\n  marker.setMap(null);\n\n  this.markers_.splice(index, 1);\n\n  return true;\n};\n\n\n/**\n * Remove a marker from the cluster.\n *\n * @param {google.maps.Marker} marker The marker to remove.\n * @param {boolean=} opt_nodraw Optional boolean to force no redraw.\n * @return {boolean} True if the marker was removed.\n */\nMarkerClusterer.prototype.removeMarker = function(marker, opt_nodraw) {\n  var removed = this.removeMarker_(marker);\n\n  if (!opt_nodraw && removed) {\n    this.resetViewport();\n    this.redraw();\n    return true;\n  } else {\n   return false;\n  }\n};\n\n\n/**\n * Removes an array of markers from the cluster.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to remove.\n * @param {boolean=} opt_nodraw Optional boolean to force no redraw.\n */\nMarkerClusterer.prototype.removeMarkers = function(markers, opt_nodraw) {\n  // create a local copy of markers if required\n  // (removeMarker_ modifies the getMarkers() array in place)\n  var markersCopy = markers === this.getMarkers() ? markers.slice() : markers;\n  var removed = false;\n\n  for (var i = 0, marker; marker = markersCopy[i]; i++) {\n    var r = this.removeMarker_(marker);\n    removed = removed || r;\n  }\n\n  if (!opt_nodraw && removed) {\n    this.resetViewport();\n    this.redraw();\n    return true;\n  }\n};\n\n\n/**\n * Sets the clusterer's ready state.\n *\n * @param {boolean} ready The state.\n * @private\n */\nMarkerClusterer.prototype.setReady_ = function(ready) {\n  if (!this.ready_) {\n    this.ready_ = ready;\n    this.createClusters_();\n  }\n};\n\n\n/**\n * Returns the number of clusters in the clusterer.\n *\n * @return {number} The number of clusters.\n */\nMarkerClusterer.prototype.getTotalClusters = function() {\n  return this.clusters_.length;\n};\n\n\n/**\n * Returns the google map that the clusterer is associated with.\n *\n * @return {google.maps.Map} The map.\n */\nMarkerClusterer.prototype.getMap = function() {\n  return this.map_;\n};\n\n\n/**\n * Sets the google map that the clusterer is associated with.\n *\n * @param {google.maps.Map} map The map.\n */\nMarkerClusterer.prototype.setMap = function(map) {\n  this.map_ = map;\n};\n\n\n/**\n * Returns the size of the grid.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getGridSize = function() {\n  return this.gridSize_;\n};\n\n\n/**\n * Sets the size of the grid.\n *\n * @param {number} size The grid size.\n */\nMarkerClusterer.prototype.setGridSize = function(size) {\n  this.gridSize_ = size;\n};\n\n\n/**\n * Returns the min cluster size.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getMinClusterSize = function() {\n  return this.minClusterSize_;\n};\n\n/**\n * Sets the min cluster size.\n *\n * @param {number} size The grid size.\n */\nMarkerClusterer.prototype.setMinClusterSize = function(size) {\n  this.minClusterSize_ = size;\n};\n\n\n/**\n * Extends a bounds object by the grid size.\n *\n * @param {google.maps.LatLngBounds} bounds The bounds to extend.\n * @return {google.maps.LatLngBounds} The extended bounds.\n */\nMarkerClusterer.prototype.getExtendedBounds = function(bounds) {\n  var projection = this.getProjection();\n\n  // Turn the bounds into latlng.\n  var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),\n      bounds.getNorthEast().lng());\n  var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),\n      bounds.getSouthWest().lng());\n\n  // Convert the points to pixels and the extend out by the grid size.\n  var trPix = projection.fromLatLngToDivPixel(tr);\n  trPix.x += this.gridSize_;\n  trPix.y -= this.gridSize_;\n\n  var blPix = projection.fromLatLngToDivPixel(bl);\n  blPix.x -= this.gridSize_;\n  blPix.y += this.gridSize_;\n\n  // Convert the pixel points back to LatLng\n  var ne = projection.fromDivPixelToLatLng(trPix);\n  var sw = projection.fromDivPixelToLatLng(blPix);\n\n  // Extend the bounds to contain the new bounds.\n  bounds.extend(ne);\n  bounds.extend(sw);\n\n  return bounds;\n};\n\n\n/**\n * Determins if a marker is contained in a bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @param {google.maps.LatLngBounds} bounds The bounds to check against.\n * @return {boolean} True if the marker is in the bounds.\n * @private\n */\nMarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) {\n  return bounds.contains(marker.getPosition());\n};\n\n\n/**\n * Clears all clusters and markers from the clusterer.\n */\nMarkerClusterer.prototype.clearMarkers = function() {\n  this.resetViewport(true);\n\n  // Set the markers a empty array.\n  this.markers_ = [];\n};\n\n\n/**\n * Clears all existing clusters and recreates them.\n * @param {boolean} opt_hide To also hide the marker.\n */\nMarkerClusterer.prototype.resetViewport = function(opt_hide) {\n  // Remove all the clusters\n  for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {\n    cluster.remove();\n  }\n\n  // Reset the markers to not be added and to be invisible.\n  for (var i = 0, marker; marker = this.markers_[i]; i++) {\n    marker.isAdded = false;\n    if (opt_hide) {\n      marker.setMap(null);\n    }\n  }\n\n  this.clusters_ = [];\n};\n\n/**\n *\n */\nMarkerClusterer.prototype.repaint = function() {\n  var oldClusters = this.clusters_.slice();\n  this.clusters_.length = 0;\n  this.resetViewport();\n  this.redraw();\n\n  // Remove the old clusters.\n  // Do it in a timeout so the other clusters have been drawn first.\n  window.setTimeout(function() {\n    for (var i = 0, cluster; cluster = oldClusters[i]; i++) {\n      cluster.remove();\n    }\n  }, 0);\n};\n\n\n/**\n * Redraws the clusters.\n */\nMarkerClusterer.prototype.redraw = function() {\n  this.createClusters_();\n};\n\n\n/**\n * Calculates the distance between two latlng locations in km.\n * @see http://www.movable-type.co.uk/scripts/latlong.html\n *\n * @param {google.maps.LatLng} p1 The first lat lng point.\n * @param {google.maps.LatLng} p2 The second lat lng point.\n * @return {number} The distance between the two points in km.\n * @private\n*/\nMarkerClusterer.prototype.distanceBetweenPoints_ = function(p1, p2) {\n  if (!p1 || !p2) {\n    return 0;\n  }\n\n  var R = 6371; // Radius of the Earth in km\n  var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;\n  var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n};\n\n\n/**\n * Add a marker to a cluster, or creates a new cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @private\n */\nMarkerClusterer.prototype.addToClosestCluster_ = function(marker) {\n  var distance = 40000; // Some large number\n  var clusterToAddTo = null;\n  var pos = marker.getPosition();\n  for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {\n    var center = cluster.getCenter();\n    if (center) {\n      var d = this.distanceBetweenPoints_(center, marker.getPosition());\n      if (d < distance) {\n        distance = d;\n        clusterToAddTo = cluster;\n      }\n    }\n  }\n\n  if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n    clusterToAddTo.addMarker(marker);\n  } else {\n    var cluster = new Cluster(this);\n    cluster.addMarker(marker);\n    this.clusters_.push(cluster);\n  }\n};\n\n\n/**\n * Creates the clusters.\n *\n * @private\n */\nMarkerClusterer.prototype.createClusters_ = function() {\n  if (!this.ready_) {\n    return;\n  }\n\n  // Get our current map view bounds.\n  // Create a new bounds object so we don't affect the map.\n  var mapBounds = new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),\n      this.map_.getBounds().getNorthEast());\n  var bounds = this.getExtendedBounds(mapBounds);\n\n  for (var i = 0, marker; marker = this.markers_[i]; i++) {\n    if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {\n      this.addToClosestCluster_(marker);\n    }\n  }\n};\n\n\n/**\n * A cluster that contains markers.\n *\n * @param {MarkerClusterer} markerClusterer The markerclusterer that this\n *     cluster is associated with.\n * @constructor\n * @ignore\n */\nfunction Cluster(markerClusterer) {\n  this.markerClusterer_ = markerClusterer;\n  this.map_ = markerClusterer.getMap();\n  this.gridSize_ = markerClusterer.getGridSize();\n  this.minClusterSize_ = markerClusterer.getMinClusterSize();\n  this.averageCenter_ = markerClusterer.isAverageCenter();\n  this.center_ = null;\n  this.markers_ = [];\n  this.bounds_ = null;\n  this.clusterIcon_ = new ClusterIcon(this, markerClusterer.getStyles(),\n      markerClusterer.getGridSize());\n}\n\n/**\n * Determins if a marker is already added to the cluster.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker is already added.\n */\nCluster.prototype.isMarkerAlreadyAdded = function(marker) {\n  if (this.markers_.indexOf) {\n    return this.markers_.indexOf(marker) != -1;\n  } else {\n    for (var i = 0, m; m = this.markers_[i]; i++) {\n      if (m == marker) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n/**\n * Add a marker the cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @return {boolean} True if the marker was added.\n */\nCluster.prototype.addMarker = function(marker) {\n  if (this.isMarkerAlreadyAdded(marker)) {\n    return false;\n  }\n\n  if (!this.center_) {\n    this.center_ = marker.getPosition();\n    this.calculateBounds_();\n  } else {\n    if (this.averageCenter_) {\n      var l = this.markers_.length + 1;\n      var lat = (this.center_.lat() * (l-1) + marker.getPosition().lat()) / l;\n      var lng = (this.center_.lng() * (l-1) + marker.getPosition().lng()) / l;\n      this.center_ = new google.maps.LatLng(lat, lng);\n      this.calculateBounds_();\n    }\n  }\n\n  marker.isAdded = true;\n  this.markers_.push(marker);\n\n  var len = this.markers_.length;\n  if (len < this.minClusterSize_ && marker.getMap() != this.map_) {\n    // Min cluster size not reached so show the marker.\n    marker.setMap(this.map_);\n  }\n\n  if (len == this.minClusterSize_) {\n    // Hide the markers that were showing.\n    for (var i = 0; i < len; i++) {\n      this.markers_[i].setMap(null);\n    }\n  }\n\n  if (len >= this.minClusterSize_) {\n    marker.setMap(null);\n  }\n\n  this.updateIcon();\n  return true;\n};\n\n\n/**\n * Returns the marker clusterer that the cluster is associated with.\n *\n * @return {MarkerClusterer} The associated marker clusterer.\n */\nCluster.prototype.getMarkerClusterer = function() {\n  return this.markerClusterer_;\n};\n\n\n/**\n * Returns the bounds of the cluster.\n *\n * @return {google.maps.LatLngBounds} the cluster bounds.\n */\nCluster.prototype.getBounds = function() {\n  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n  var markers = this.getMarkers();\n  for (var i = 0, marker; marker = markers[i]; i++) {\n    bounds.extend(marker.getPosition());\n  }\n  return bounds;\n};\n\n\n/**\n * Removes the cluster\n */\nCluster.prototype.remove = function() {\n  this.clusterIcon_.remove();\n  this.markers_.length = 0;\n  delete this.markers_;\n};\n\n\n/**\n * Returns the number of markers in the cluster.\n *\n * @return {number} The number of markers in the cluster.\n */\nCluster.prototype.getSize = function() {\n  return this.markers_.length;\n};\n\n\n/**\n * Returns a list of the markers in the cluster.\n *\n * @return {Array.<google.maps.Marker>} The markers in the cluster.\n */\nCluster.prototype.getMarkers = function() {\n  return this.markers_;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {google.maps.LatLng} The cluster center.\n */\nCluster.prototype.getCenter = function() {\n  return this.center_;\n};\n\n\n/**\n * Calculated the extended bounds of the cluster with the grid.\n *\n * @private\n */\nCluster.prototype.calculateBounds_ = function() {\n  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n  this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);\n};\n\n\n/**\n * Determines if a marker lies in the clusters bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker lies in the bounds.\n */\nCluster.prototype.isMarkerInClusterBounds = function(marker) {\n  return this.bounds_.contains(marker.getPosition());\n};\n\n\n/**\n * Returns the map that the cluster is associated with.\n *\n * @return {google.maps.Map} The map.\n */\nCluster.prototype.getMap = function() {\n  return this.map_;\n};\n\n\n/**\n * Updates the cluster icon\n */\nCluster.prototype.updateIcon = function() {\n  var zoom = this.map_.getZoom();\n  var mz = this.markerClusterer_.getMaxZoom();\n\n  if (mz && zoom > mz) {\n    // The zoom is greater than our max zoom so show all the markers in cluster.\n    for (var i = 0, marker; marker = this.markers_[i]; i++) {\n      marker.setMap(this.map_);\n    }\n    return;\n  }\n\n  if (this.markers_.length < this.minClusterSize_) {\n    // Min cluster size not yet reached.\n    this.clusterIcon_.hide();\n    return;\n  }\n\n  var numStyles = this.markerClusterer_.getStyles().length;\n  var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);\n  this.clusterIcon_.setCenter(this.center_);\n  this.clusterIcon_.setSums(sums);\n  this.clusterIcon_.show();\n};\n\n\n/**\n * A cluster icon\n *\n * @param {Cluster} cluster The cluster to be associated with.\n * @param {Object} styles An object that has style properties:\n *     'url': (string) The image url.\n *     'height': (number) The image height.\n *     'width': (number) The image width.\n *     'anchor': (Array) The anchor position of the label text.\n *     'textColor': (string) The text color.\n *     'textSize': (number) The text size.\n *     'backgroundPosition: (string) The background postition x, y.\n * @param {number=} opt_padding Optional padding to apply to the cluster icon.\n * @constructor\n * @extends google.maps.OverlayView\n * @ignore\n */\nfunction ClusterIcon(cluster, styles, opt_padding) {\n  cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);\n\n  this.styles_ = styles;\n  this.padding_ = opt_padding || 0;\n  this.cluster_ = cluster;\n  this.center_ = null;\n  this.map_ = cluster.getMap();\n  this.div_ = null;\n  this.sums_ = null;\n  this.visible_ = false;\n\n  this.setMap(this.map_);\n}\n\n\n/**\n * Triggers the clusterclick event and zoom's if the option is set.\n */\nClusterIcon.prototype.triggerClusterClick = function() {\n  var markerClusterer = this.cluster_.getMarkerClusterer();\n\n  // Trigger the clusterclick event.\n  google.maps.event.trigger(markerClusterer.map_, 'clusterclick', this.cluster_);\n\n  if (markerClusterer.isZoomOnClick()) {\n    // Zoom into the cluster.\n    this.map_.fitBounds(this.cluster_.getBounds());\n  }\n};\n\n\n/**\n * Adding the cluster icon to the dom.\n * @ignore\n */\nClusterIcon.prototype.onAdd = function() {\n  this.div_ = document.createElement('DIV');\n  if (this.visible_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.cssText = this.createCss(pos);\n    this.div_.innerHTML = this.sums_.text;\n  }\n\n  var panes = this.getPanes();\n  panes.overlayMouseTarget.appendChild(this.div_);\n\n  var that = this;\n  google.maps.event.addDomListener(this.div_, 'click', function() {\n    that.triggerClusterClick();\n  });\n};\n\n\n/**\n * Returns the position to place the div dending on the latlng.\n *\n * @param {google.maps.LatLng} latlng The position in latlng.\n * @return {google.maps.Point} The position in pixels.\n * @private\n */\nClusterIcon.prototype.getPosFromLatLng_ = function(latlng) {\n  var pos = this.getProjection().fromLatLngToDivPixel(latlng);\n  pos.x -= parseInt(this.width_ / 2, 10);\n  pos.y -= parseInt(this.height_ / 2, 10);\n  return pos;\n};\n\n\n/**\n * Draw the icon.\n * @ignore\n */\nClusterIcon.prototype.draw = function() {\n  if (this.visible_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.top = pos.y + 'px';\n    this.div_.style.left = pos.x + 'px';\n  }\n};\n\n\n/**\n * Hide the icon.\n */\nClusterIcon.prototype.hide = function() {\n  if (this.div_) {\n    this.div_.style.display = 'none';\n  }\n  this.visible_ = false;\n};\n\n\n/**\n * Position and show the icon.\n */\nClusterIcon.prototype.show = function() {\n  if (this.div_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.cssText = this.createCss(pos);\n    this.div_.style.display = '';\n  }\n  this.visible_ = true;\n};\n\n\n/**\n * Remove the icon from the map\n */\nClusterIcon.prototype.remove = function() {\n  this.setMap(null);\n};\n\n\n/**\n * Implementation of the onRemove interface.\n * @ignore\n */\nClusterIcon.prototype.onRemove = function() {\n  if (this.div_ && this.div_.parentNode) {\n    this.hide();\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n\n\n/**\n * Set the sums of the icon.\n *\n * @param {Object} sums The sums containing:\n *   'text': (string) The text to display in the icon.\n *   'index': (number) The style index of the icon.\n */\nClusterIcon.prototype.setSums = function(sums) {\n  this.sums_ = sums;\n  this.text_ = sums.text;\n  this.index_ = sums.index;\n  if (this.div_) {\n    this.div_.innerHTML = sums.text;\n  }\n\n  this.useStyle();\n};\n\n\n/**\n * Sets the icon to the the styles.\n */\nClusterIcon.prototype.useStyle = function() {\n  var index = Math.max(0, this.sums_.index - 1);\n  index = Math.min(this.styles_.length - 1, index);\n  var style = this.styles_[index];\n  this.url_ = style['url'];\n  this.height_ = style['height'];\n  this.width_ = style['width'];\n  this.textColor_ = style['textColor'];\n  this.anchor_ = style['anchor'];\n  this.textSize_ = style['textSize'];\n  this.backgroundPosition_ = style['backgroundPosition'];\n};\n\n\n/**\n * Sets the center of the icon.\n *\n * @param {google.maps.LatLng} center The latlng to set as the center.\n */\nClusterIcon.prototype.setCenter = function(center) {\n  this.center_ = center;\n};\n\n\n/**\n * Create the css text based on the position of the icon.\n *\n * @param {google.maps.Point} pos The position.\n * @return {string} The css style text.\n */\nClusterIcon.prototype.createCss = function(pos) {\n  var style = [];\n  style.push('background-image:url(' + this.url_ + ');');\n  var backgroundPosition = this.backgroundPosition_ ? this.backgroundPosition_ : '0 0';\n  style.push('background-position:' + backgroundPosition + ';');\n\n  if (typeof this.anchor_ === 'object') {\n    if (typeof this.anchor_[0] === 'number' && this.anchor_[0] > 0 &&\n        this.anchor_[0] < this.height_) {\n      style.push('height:' + (this.height_ - this.anchor_[0]) +\n          'px; padding-top:' + this.anchor_[0] + 'px;');\n    } else {\n      style.push('height:' + this.height_ + 'px; line-height:' + this.height_ +\n          'px;');\n    }\n    if (typeof this.anchor_[1] === 'number' && this.anchor_[1] > 0 &&\n        this.anchor_[1] < this.width_) {\n      style.push('width:' + (this.width_ - this.anchor_[1]) +\n          'px; padding-left:' + this.anchor_[1] + 'px;');\n    } else {\n      style.push('width:' + this.width_ + 'px; text-align:center;');\n    }\n  } else {\n    style.push('height:' + this.height_ + 'px; line-height:' +\n        this.height_ + 'px; width:' + this.width_ + 'px; text-align:center;');\n  }\n\n  var txtColor = this.textColor_ ? this.textColor_ : 'black';\n  var txtSize = this.textSize_ ? this.textSize_ : 11;\n\n  style.push('cursor:pointer; top:' + pos.y + 'px; left:' +\n      pos.x + 'px; color:' + txtColor + '; position:absolute; font-size:' +\n      txtSize + 'px; font-family:Arial,sans-serif; font-weight:bold');\n  return style.join('');\n};\n\n\n// Export Symbols for Closure\n// If you are not going to compile with closure then you can remove the\n// code below.\nwindow['MarkerClusterer'] = MarkerClusterer;\nMarkerClusterer.prototype['addMarker'] = MarkerClusterer.prototype.addMarker;\nMarkerClusterer.prototype['addMarkers'] = MarkerClusterer.prototype.addMarkers;\nMarkerClusterer.prototype['clearMarkers'] =\n    MarkerClusterer.prototype.clearMarkers;\nMarkerClusterer.prototype['fitMapToMarkers'] =\n    MarkerClusterer.prototype.fitMapToMarkers;\nMarkerClusterer.prototype['getCalculator'] =\n    MarkerClusterer.prototype.getCalculator;\nMarkerClusterer.prototype['getGridSize'] =\n    MarkerClusterer.prototype.getGridSize;\nMarkerClusterer.prototype['getExtendedBounds'] =\n    MarkerClusterer.prototype.getExtendedBounds;\nMarkerClusterer.prototype['getMap'] = MarkerClusterer.prototype.getMap;\nMarkerClusterer.prototype['getMarkers'] = MarkerClusterer.prototype.getMarkers;\nMarkerClusterer.prototype['getMaxZoom'] = MarkerClusterer.prototype.getMaxZoom;\nMarkerClusterer.prototype['getStyles'] = MarkerClusterer.prototype.getStyles;\nMarkerClusterer.prototype['getTotalClusters'] =\n    MarkerClusterer.prototype.getTotalClusters;\nMarkerClusterer.prototype['getTotalMarkers'] =\n    MarkerClusterer.prototype.getTotalMarkers;\nMarkerClusterer.prototype['redraw'] = MarkerClusterer.prototype.redraw;\nMarkerClusterer.prototype['removeMarker'] =\n    MarkerClusterer.prototype.removeMarker;\nMarkerClusterer.prototype['removeMarkers'] =\n    MarkerClusterer.prototype.removeMarkers;\nMarkerClusterer.prototype['resetViewport'] =\n    MarkerClusterer.prototype.resetViewport;\nMarkerClusterer.prototype['repaint'] =\n    MarkerClusterer.prototype.repaint;\nMarkerClusterer.prototype['setCalculator'] =\n    MarkerClusterer.prototype.setCalculator;\nMarkerClusterer.prototype['setGridSize'] =\n    MarkerClusterer.prototype.setGridSize;\nMarkerClusterer.prototype['setMaxZoom'] =\n    MarkerClusterer.prototype.setMaxZoom;\nMarkerClusterer.prototype['onAdd'] = MarkerClusterer.prototype.onAdd;\nMarkerClusterer.prototype['draw'] = MarkerClusterer.prototype.draw;\n\nCluster.prototype['getCenter'] = Cluster.prototype.getCenter;\nCluster.prototype['getSize'] = Cluster.prototype.getSize;\nCluster.prototype['getMarkers'] = Cluster.prototype.getMarkers;\n\nClusterIcon.prototype['onAdd'] = ClusterIcon.prototype.onAdd;\nClusterIcon.prototype['draw'] = ClusterIcon.prototype.draw;\nClusterIcon.prototype['onRemove'] = ClusterIcon.prototype.onRemove;\n\nObject.keys = Object.keys || function(o) {  \n    var result = [];  \n    for(var name in o) {  \n        if (o.hasOwnProperty(name))  \n          result.push(name);  \n    }  \n    return result;  \n};\n","dmx.Component('google-maps', {\r\n\r\n  initialData: {\r\n    zoom: 10,\r\n    maptype: 'roadmap',\r\n    latitude: null,\r\n    longitude: null,\r\n  },\r\n\r\n  attributes: {\r\n    width: {\r\n      type: [String, Number],\r\n      default: '100%',\r\n    },\r\n\r\n    height: {\r\n      type: [String, Number],\r\n      default: 400,\r\n    },\r\n\r\n    latitude: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    longitude: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    address: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    zoom: {\r\n      type: Number,\r\n      default: 10,\r\n    },\r\n\r\n    maptype: {\r\n      type: String,\r\n      default: 'roadmap',\r\n      enum: ['roadmap', 'satellite', 'hybrid', 'terrain'],\r\n    },\r\n\r\n    scrollwheel: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    tilt: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    rotateControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    scaleControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    fullscreenControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    zoomControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    streetviewControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    maptypeControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    enableClusters: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    trafficLayer: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    transitLayer: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    bicyclingLayer: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    markers: {\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    markerId: {\r\n      type: String, // expression\r\n      default: 'id',\r\n    },\r\n\r\n    markerLatitude: {\r\n      type: String, // expression\r\n      default: 'latitude',\r\n    },\r\n\r\n    markerLongitude: {\r\n      type: String, // expression\r\n      default: 'longitude',\r\n    },\r\n\r\n    markerAddress: {\r\n      type: String, // expression\r\n      default: 'address',\r\n    },\r\n\r\n    markerLabel: {\r\n      type: String, // expression\r\n      default: 'label',\r\n    },\r\n\r\n    markerLabelColor: {\r\n      type: String, // expression\r\n      default: 'labelColor',\r\n    },\r\n\r\n    markerTitle: {\r\n      type: String, // expression\r\n      default: 'title',\r\n    },\r\n\r\n    markerInfo: {\r\n      type: String, // expression\r\n      default: 'info',\r\n    },\r\n\r\n    markerType: {\r\n      type: String, // expression\r\n      default: 'type',\r\n    },\r\n\r\n    markerImage: {\r\n      type: String, // expression\r\n      default: 'image',\r\n    },\r\n\r\n    markerAnimation: {\r\n      type: String, // expression\r\n      default: 'animation',\r\n    },\r\n\r\n    markerDraggable: {\r\n      type: String, // expression\r\n      default: 'draggable',\r\n    },\r\n\r\n    clusterGridSize: {\r\n      type: Number,\r\n      default: 60,\r\n    },\r\n\r\n    clusterMaxZoom: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    minClusterSize: {\r\n      type: Number,\r\n      default: 2,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    addMarker (options) {\r\n      const marker = this._addMarker(options);\r\n      if (this._cluster && this.props.enableClusters) {\r\n        this._cluster.addMarker(marker);\r\n      } else {\r\n        marker.setMap(this._map);\r\n      }\r\n    },\r\n\r\n    goToMarker (id) {\r\n      const marker = this._findMarker(id);\r\n      if (marker) this._map.setCenter(marker.position);\r\n    },\r\n\r\n    panToMarker (id) {\r\n      const marker = this._findMarker(id);\r\n      if (marker) this._map.panTo(marker.position);\r\n    },\r\n\r\n    bounceMarker (id) {\r\n      const marker = this._findMarker(id);\r\n      if (marker) marker.setAnimation(1);\r\n    },\r\n\r\n    stopBounce (id) {\r\n      const marker = this._findMarker(id);\r\n      if (marker) marker.setAnimation(null);\r\n    },\r\n\r\n    showInfo (id) {\r\n      const marker = this._findMarker(id);\r\n      if (marker && marker.info) this._openInfoWindow(marker, marker.info);\r\n    },\r\n\r\n    fitBoundsToMarkers () {\r\n      if (this._markers.length) {\r\n        const bounds = new google.maps.LatLngBounds();\r\n\r\n        for (let i = 0; i < this._markers.length; i++) {\r\n          bounds.extend(this._markers[i].getPosition());\r\n        }\r\n\r\n        this._map.fitBounds(bounds);\r\n      }\r\n    },\r\n\r\n    removeAllMarkers () {\r\n      this._removeAllMarkers();\r\n    },\r\n\r\n    panTo (lat, lng) {\r\n      this._map.panTo({ lat: +lat, lng: +lng });\r\n    },\r\n\r\n    setCenter (lat, lng) {\r\n      this._map.setCenter({ lat: +lat, lng: +lng });\r\n    },\r\n\r\n    setMapType (maptype) {\r\n      this._map.setMapTypeId(maptype);\r\n    },\r\n\r\n    setZoom (zoom) {\r\n      this._map.setZoom(zoom);\r\n    },\r\n\r\n    refresh () {\r\n      google.maps.event.trigger(this._map, 'resize');\r\n    },\r\n\r\n    reload () {\r\n      this._relaod();\r\n    },\r\n  },\r\n\r\n  events: {\r\n    ready: Event,\r\n    boundschanged: Event,\r\n    centerchanged: Event,\r\n    maptypechanged: Event,\r\n    zoomchanged: Event,\r\n    mapclick: Event,\r\n    markerclick: Event,\r\n    markerpositionchanged: Event,\r\n  },\r\n\r\n  init () {\r\n    const markerUrl = 'https://maps.google.com/mapfiles/';\r\n    const iconsUrl = 'https://maps.google.com/intl/en_us/mapfiles/ms/micons/';\r\n\r\n    this._geocodeCache = JSON.parse(localStorage.geocodeCache || '{}');\r\n    this._geocoder = new google.maps.Geocoder();\r\n    this._infoWindow = new google.maps.InfoWindow();\r\n\r\n    this._markers = [];\r\n    this._markerTypes = {\r\n      black: markerUrl + 'marker_black.png',\r\n      grey: markerUrl + 'marker_grey.png',\r\n      orange: markerUrl + 'marker_orange.png',\r\n      white: markerUrl + 'marker_white.png',\r\n      yellow: markerUrl + 'marker_yellow.png',\r\n      purple: markerUrl + 'marker_purple.png',\r\n      green: markerUrl + 'marker_green.png',\r\n      start: markerUrl + 'dd-start.png',\r\n      end: markerUrl + 'dd-end.png',\r\n      tree: iconsUrl + 'tree.png',\r\n      lodging: iconsUrl + 'lodging.png',\r\n      bar: iconsUrl + 'bar.png',\r\n      restaurant: iconsUrl + 'restaurant.png',\r\n      horsebackriding: iconsUrl + 'horsebackriding.png',\r\n      convienancestore: iconsUrl + 'convienancestore.png',\r\n      hiker: iconsUrl + 'hiker.png',\r\n      swimming: iconsUrl + 'swimming.png',\r\n      fishing: iconsUrl + 'fishing.png',\r\n      golfer: iconsUrl + 'golfer.png',\r\n      sportvenue: iconsUrl + 'sportvenue.png',\r\n    };\r\n\r\n    this._clickHandler = this._clickHandler.bind(this);\r\n    this._boundsHandler = dmx.debounce(this._boundsHandler.bind(this), 100);\r\n    this._centerHandler = dmx.debounce(this._centerHandler.bind(this), 100);\r\n    this._maptypeHandler = dmx.debounce(this._maptypeHandler.bind(this), 100);\r\n    this._zoomHandler = dmx.debounce(this._zoomHandler.bind(this), 100);\r\n  },\r\n\r\n  render (node) {\r\n    this.$parse();\r\n\r\n    node.style.setProperty('display', 'block');\r\n    node.style.setProperty('width', this._getSize(this.props.width));\r\n    node.style.setProperty('height', this._getSize(this.props.height));\r\n\r\n    this._map = new google.maps.Map(node, {\r\n      zoom: +this.props.zoom,\r\n      center: { lat: +this.props.latitude, lng: +this.props.longitude },\r\n      mapTypeId: this.props.maptype,\r\n      scrollwheel: this.props.scrollwheel,\r\n      scaleControl: this.props.scaleControl,\r\n      zoomControl: this.props.zoomControl,\r\n      panControl: this.props.panControl,\r\n      streetViewControl: this.props.streetviewControl,\r\n      mapTypeControl: this.props.maptypeControl,\r\n      rotateControl: this.props.rotateControl,\r\n      fullscreenControl: this.props.fullscreenControl,\r\n    });\r\n\r\n    if (window.googleMapsTheme) {\r\n      this._map.setOptions({ styles: window.googleMapsTheme });\r\n    }\r\n\r\n    if (this.props.tilt) {\r\n      this._map.setTilt(45);\r\n    }\r\n\r\n    this._getMarkers();\r\n\r\n    if (this.props.enableClusters) {\r\n      this._cluster = new MarkerClusterer(this._map, this._markers, {\r\n        imagePath: this._getImageFolder(),\r\n        gridSize: this.props.clusterGridSize,\r\n        minimumClusterSize: this.props.minClusterSize,\r\n        maxZoom: this.props.clusterMaxZoom,\r\n      });\r\n    }\r\n\r\n    if (!(this.props.latitude && this.props.longitude) && this.props.address) {\r\n      this._geocode(this.props.address);\r\n    }\r\n\r\n    if (this.props.trafficLayer) {\r\n      this._trafficLayer = new google.maps.TrafficLayer();\r\n      this._trafficLayer.setMap(this._map);\r\n    }\r\n\r\n    if (this.props.transitLayer) {\r\n      this._transitLayer = new google.maps.TransitLayer();\r\n      this._transitLayer.setMap(this._map);\r\n    }\r\n\r\n    if (this.props.bicyclingLayer) {\r\n      this._bikeLayer = new google.maps.BicyclingLayer();\r\n      this._bikeLayer.setMap(this._map);\r\n    }\r\n\r\n    this._map.addListener('click', this._clickHandler);\r\n    this._map.addListener('bounds_changed', this._boundsHandler);\r\n    this._map.addListener('center_changed', this._centerHandler);\r\n    this._map.addListener('maptypeid_changed', this._maptypeHandler);\r\n    this._map.addListener('zoom_changed', this._zoomHandler);\r\n\r\n    this.set('latitude', +this.props.latitude);\r\n    this.set('longitude', +this.props.longitude);\r\n    this.set('maptype', this._map.getMapTypeId());\r\n    this.set('zoom', this._map.getZoom());\r\n\r\n    setTimeout(() => {\r\n      this.dispatchEvent('ready');\r\n    }, 100);\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('latitude') || updatedProps.has('longitude')) {\r\n      this._map.setCenter({ lat: +this.props.latitude, lng: +this.props.longitude });\r\n    }\r\n\r\n    if (updatedProps.has('address')) {\r\n      this._geocode(this.props.address);\r\n    }\r\n\r\n    if (updatedProps.has('zoom')) {\r\n      this._map.setZoom(this.props.zoom);\r\n    }\r\n\r\n    if (updatedProps.has('maptype')) {\r\n      this._map.setMapTypeId(this.props.maptype);\r\n    }\r\n\r\n    if (updatedProps.has('tilt')) {\r\n      this._map.setTilt(this.props.tilt ? 45 : 0);\r\n    }\r\n\r\n    if (updatedProps.has('scrollwheel')) {\r\n      this._map.setOptions({ scrollwheel: this.props.scrollwheel });\r\n    }\r\n\r\n    if (updatedProps.has('scaleControl')) {\r\n      this._map.setOptions({ scaleControl: this.props.scaleControl });\r\n    }\r\n\r\n    if (updatedProps.has('zoomControl')) {\r\n      this._map.setOptions({ zoomControl: this.props.zoomControl });\r\n    }\r\n\r\n    if (updatedProps.has('panControl')) {\r\n      this._map.setOptions({ panControl: this.props.panControl });\r\n    }\r\n\r\n    if (updatedProps.has('streetviewControl')) {\r\n      this._map.setOptions({ streetViewControl: this.props.streetviewControl });\r\n    }\r\n\r\n    if (updatedProps.has('maptypeControl')) {\r\n      this._map.setOptions({ mapTypeControl: this.props.maptypeControl });\r\n    }\r\n\r\n    if (updatedProps.has('rotateControl')) {\r\n      this._map.setOptions({ rotateControl: this.props.rotateControl });\r\n    }\r\n\r\n    if (updatedProps.has('fullscreenControl')) {\r\n      this._map.setOptions({ fullscreenControl: this.props.fullscreenControl });\r\n    }\r\n\r\n    if (updatedProps.has('trafficLayer')) {\r\n      this._trafficLayer = this._trafficLayer || new google.maps.TrafficLayer();\r\n      this._trafficLayer.setMap(this.props.trafficLayer ? this._map : null);\r\n    }\r\n\r\n    if (updatedProps.has('trasitLayer')) {\r\n      this._transitLayer = this._transitLayer || new google.maps.TransitLayer();\r\n      this._transitLayer.setMap(this.props.transitLayer ? this._map : null);\r\n    }\r\n\r\n    if (updatedProps.has('bicycleLayer')) {\r\n      this._bikeLayer = this._bikeLayer || new google.maps.BicyclingLayer();\r\n      this._bikeLayer.setMap(this.props.bicyclingLayer ? this._map : null);\r\n    }\r\n\r\n    if (updatedProps.has('markers')) {\r\n      this._removeAllMarkers();\r\n\r\n      const markers = dmx.repeatItems(this.props.markers);\r\n\r\n      if (Array.isArray(markers)) {\r\n        for (let marker of markers) {\r\n          const scope = dmx.DataScope(marker, this.parent);\r\n          \r\n          this._addMarker({\r\n            id: dmx.parse(this.props.markerId, scope),\r\n            latitude: +dmx.parse(this.props.markerLatitude, scope),\r\n            longitude: +dmx.parse(this.props.markerLongitude, scope),\r\n            address: dmx.parse(this.props.markerAddress, scope),\r\n            label: dmx.parse(this.props.markerLabel, scope),\r\n            labelColor: dmx.parse(this.props.markerLabelColor, scope),\r\n            title: dmx.parse(this.props.markerTitle, scope),\r\n            info: dmx.parse(this.props.markerInfo, scope),\r\n            type: dmx.parse(this.props.markerType, scope),\r\n            image: dmx.parse(this.props.markerImage, scope),\r\n            animation: dmx.parse(this.props.markerAnimation, scope),\r\n            draggable: !!dmx.parse(this.props.markerDraggable, scope),\r\n          });\r\n        }\r\n\r\n        if (this.props.enableClusters) {\r\n          this._cluster = new MarkerClusterer(this._map, this._markers, {\r\n            imagePath: this._getImageFolder(),\r\n            gridSize: this.props.clusterGridSize,\r\n            minimumClusterSize: this.props.minClusterSize,\r\n            maxZoom: this.props.clusterMaxZoom,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \r\n  destroy () {\r\n    // cleanup here\r\n  },\r\n\r\n  _reload () {\r\n    this.performUpdate(new Map([\r\n      ['latitude', 1],\r\n      ['longitude', 1],\r\n      ['address', 1],\r\n      ['zoom', 1],\r\n      ['maptype', 1],\r\n      ['tilt', 1],\r\n      ['scrollwheel', 1],\r\n      ['scaleControl', 1],\r\n      ['zoomControl', 1],\r\n      ['panControl', 1],\r\n      ['streetviewControl', 1],\r\n      ['maptypeControl', 1],\r\n      ['rotateControl', 1],\r\n      ['fullscreenControl', 1],\r\n      ['trafficLayer', 1],\r\n      ['trasitLayer', 1],\r\n      ['bicycleLayer', 1],\r\n      ['markers', 1],\r\n    ]));\r\n  },\r\n\r\n  _getSize (size) {\r\n    if (typeof size == 'string' && size.slice(-1) == '%') {\r\n      return size;\r\n    } else {\r\n      return parseInt(size, 10) + 'px';\r\n    }\r\n  },\r\n\r\n  _getImageFolder () {\r\n    const script = document.querySelector('script[src$=\"dmxGoogleMaps.js\"]');\r\n    if (script) return script.src.replace(/dmxGoogleMaps.js$/, 'images/m');\r\n    return 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m';\r\n  },\r\n\r\n  _getMarkerAnimation (animation) {\r\n    switch (animation.toLowerCase()) {\r\n      case 'bounce': return 1;\r\n      case 'drop': return 2;\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  _geocode (address) {\r\n    if (address) {\r\n      if (this._geocodeCache[address]) {\r\n        this._map.setCenter(this._geocodeCache[address]);\r\n      } else {\r\n        this._geocoder.geocode({ address }, (results, status) => {\r\n          if (status == 'OK') {\r\n            this._geocodeCache[address] = results[0].geometry.location;\r\n            this._map.setCenter(this._geocodeCache[address]);\r\n            localStorage.geocodeCache = JSON.stringify(this._geocodeCache);\r\n          } else {\r\n            console.warn(`Geocode was not successful for the following reason: ${status}`);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  _openInfoWindow (marker, content) {\r\n    this._infoWindow.setContent(content);\r\n    this._infoWindow.open(this._map, marker);\r\n  },\r\n\r\n  _getMarkers () {\r\n    for (let child of this.children) {\r\n      if (child instanceof dmx.Component('google-maps-marker')) {\r\n        child._marker = this._addMarker({\r\n          static: true,\r\n          id: child.name,\r\n          latitude: +child.props.latitude,\r\n          longitude: +child.props.longitude,\r\n          address: child.props.address,\r\n          label: child.props.label,\r\n          labelColor: child.props.labelColor,\r\n          title: child.props.title,\r\n          info: child.props.info,\r\n          type: child.props.type,\r\n          image: child.props.image,\r\n          animations: child.props.animation,\r\n          draggable: child.props.draggable,\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  _findMarker (id) {\r\n    return this._markers.find(marker => {\r\n      return marker.id == id;\r\n    });\r\n  },\r\n\r\n  _addMarker (options) {\r\n    const marker = new google.maps.Marker({\r\n      static: !!options.static,\r\n      position: { lat: +options.latitude, lng: +options.longitude },\r\n      label: options.label,\r\n      title: options.title,\r\n      icon: this._markerTypes[options.type],\r\n      draggable: options.draggable,\r\n    });\r\n\r\n    if (options.id) {\r\n      marker.id = options.id;\r\n    }\r\n\r\n    if (options.image) {\r\n      marker.setIcon(options.image);\r\n    }\r\n\r\n    if (options.label && options.labelColor) {\r\n      marker.setLabel({\r\n        color: options.labelColor,\r\n        text: options.label,\r\n      });\r\n    }\r\n\r\n    if (options.info) {\r\n      marker.info = options.info;\r\n      marker.addListener('click', e => {\r\n        this._openInfoWindow(marker, options.info);\r\n      });\r\n    }\r\n\r\n    if (options.animation) {\r\n      marker.setAnimation(this._getMarkerAnimation(options.animation));\r\n    }\r\n\r\n    if (!(options.latitude && options.longitude)) {\r\n      if (options.address) {\r\n        if (this._geocodeCache[options.address]) {\r\n          marker.setPosition(this._geocodeCache[options.address]);\r\n        } else {\r\n          this._geocoder.geocode({ address: options.address }, (results, status) => {\r\n            if (status == 'OK') {\r\n              this._geocodeCache[options.address] = results[0].geometry.location;\r\n              marker.setPosition(this._geocodeCache[options.address]);\r\n              marker.setVisible(true);\r\n              localStorage.geocodeCache = JSON.stringify(this._geocodeCache);\r\n            } else {\r\n              console.warn(`Geocode was not successful for the following reason: ${status}`);\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        marker.setVisible(false);\r\n      }\r\n    }\r\n\r\n    if (this._map && !this.props.enableClusters) {\r\n      marker.setMap(this._map);\r\n    }\r\n\r\n    marker.addListener('click', this._markerClickHandler.bind(this, marker));\r\n    marker.addListener('position_changed', this._markerPositionHandler.bind(this, marker));\r\n\r\n    this._markers.push(marker);\r\n\r\n    return marker;\r\n  },\r\n\r\n  _removeAllMarkers () {\r\n    if (this._cluster) {\r\n      this._cluster.clearMarkers();\r\n    }\r\n\r\n    this._markers = this._markers.filter(marker => {\r\n      if (!marker.static) {\r\n        google.maps.event.clearInstanceListeners(marker);\r\n        marker.setMap(null);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    })\r\n  },\r\n\r\n  _clickHandler (e) {\r\n    this.dispatchEvent('mapclick', null, {\r\n      latitude: e.latLng.lat(),\r\n      longitude: e.latLng.lng(),\r\n      position: e.latLng.toJSON(),\r\n    });\r\n  },\r\n\r\n  _boundsHandler (e) {\r\n    this.dispatchEvent('boundschanged');\r\n  },\r\n\r\n  _centerHandler (e) {\r\n    const center = this._map.getCenter();\r\n    this.set('latitude', center.lat());\r\n    this.set('longitude', center.lng());\r\n    this.dispatchEvent('centerchanged');\r\n  },\r\n\r\n  _maptypeHandler (e) {\r\n    this.set('maptype', this._map.getMapTypeId());\r\n    this.dispatchEvent('maptypechanged');\r\n  },\r\n\r\n  _zoomHandler (e) {\r\n    this.set('zoom', this._map.getZoom());\r\n    this.dispatchEvent('zoomchanged');\r\n  },\r\n\r\n  _markerClickHandler (marker) {\r\n    this.dispatchEvent('markerclick', null, { id: marker.id })\r\n  },\r\n\r\n  _markerPositionHandler (marker) {\r\n    this.dispatchEvent('markerpositionchanged', null, {\r\n      id: marker.id,\r\n      latitude: marker.position.lat(),\r\n      longitude: marker.position.lng(),\r\n      position: marker.position.toJSON(),\r\n    });\r\n  },\r\n\r\n});\r\n","dmx.Component('google-maps-marker', {\r\n\r\n  attributes: {\r\n    latitude: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    longitude: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    address: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    label: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    labelColor: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    title: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    info: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    type: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    image: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    animation: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  render: false,\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('latitude') || updatedProps.has('longitude')) {\r\n      this._marker.setPosition({\r\n        lat: +this.props.latitude,\r\n        lng: +this.props.longitude,\r\n      });\r\n      this._marker.setVisible(true);\r\n    }\r\n\r\n    if (updatedProps.has('address')) {\r\n      if (this.parent._geocodeCache[this.props.address]) {\r\n        this._marker.setPosition(this.parent._geocodeCache[this.props.address]);\r\n      }  else {\r\n        this.parent._geocoder.geocode({ address: this.props.address }, (results, status) => {\r\n          if (status == 'OK') {\r\n            const pos = results[0].geometry.location\r\n            this.parent._geocodeCache[this.props.address] = pos;\r\n            this._marker.setPosition(pos);\r\n            this._marker.setVisible(true);\r\n            localStorage.geocodeCache = JSON.stringify(this.parent._geocodeCache);\r\n          } else {\r\n            console.warn(`Geocode was not successful for the following reason: ${status}`);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('label') || updatedProps.has('labelColor')) {\r\n      this._marker.setLabel({\r\n        color: this.props.labelColor,\r\n        text: this.props.label,\r\n      });\r\n    }\r\n\r\n    if (updatedProps.has('title')) {\r\n      this._marker.setTitle(this.props.title);\r\n    }\r\n\r\n    if (updatedProps.has('info')) {\r\n      this._marker.infoWindow = new google.maps.infoWindow({\r\n        content: this.props.info,\r\n      });\r\n    }\r\n\r\n    if (updatedProps.has('type')) {\r\n      this._marker.setIcon(this.parent._markerTypes[this.props.type]);\r\n    }\r\n\r\n    if (updatedProps.has('image')) {\r\n      this._marker.setIcon(this.props.image);\r\n    }\r\n\r\n    if (updatedProps.has('animation')) {\r\n      this._marker.setAnimation(this.parent._getMarkerAnimation(this.props.animation));\r\n    }\r\n\r\n    if (updatedProps.has('draggable')) {\r\n      this._marker.setDraggable(this.props.draggable);\r\n    }\r\n  },\r\n\r\n});\r\n"]}