/*!
 App Connect Google Maps
 Version: 2.0.0
 (c) 2024 Wappler.io
 @build 2024-04-15 17:48:46
 */
function MarkerClusterer(e,t,r){this.extend(MarkerClusterer,google.maps.OverlayView),this.map_=e,this.markers_=[],this.clusters_=[],this.sizes=[53,56,66,78,90],this.styles_=[],this.ready_=!1;var s=r||{};this.gridSize_=s.gridSize||60,this.minClusterSize_=s.minimumClusterSize||2,this.maxZoom_=s.maxZoom||null,this.styles_=s.styles||[],this.imagePath_=s.imagePath||this.MARKER_CLUSTER_IMAGE_PATH_,this.imageExtension_=s.imageExtension||this.MARKER_CLUSTER_IMAGE_EXTENSION_,this.zoomOnClick_=!0,null!=s.zoomOnClick&&(this.zoomOnClick_=s.zoomOnClick),this.averageCenter_=!1,null!=s.averageCenter&&(this.averageCenter_=s.averageCenter),this.setupStyles_(),this.setMap(e),this.prevZoom_=this.map_.getZoom();var o=this;google.maps.event.addListener(this.map_,"zoom_changed",(function(){var e=o.map_.getZoom(),t=o.map_.minZoom||0,r=Math.min(o.map_.maxZoom||100,o.map_.mapTypes[o.map_.getMapTypeId()].maxZoom);e=Math.min(Math.max(e,t),r),o.prevZoom_!=e&&(o.prevZoom_=e,o.resetViewport())})),google.maps.event.addListener(this.map_,"idle",(function(){o.redraw()})),t&&(t.length||Object.keys(t).length)&&this.addMarkers(t,!1)}function Cluster(e){this.markerClusterer_=e,this.map_=e.getMap(),this.gridSize_=e.getGridSize(),this.minClusterSize_=e.getMinClusterSize(),this.averageCenter_=e.isAverageCenter(),this.center_=null,this.markers_=[],this.bounds_=null,this.clusterIcon_=new ClusterIcon(this,e.getStyles(),e.getGridSize())}function ClusterIcon(e,t,r){e.getMarkerClusterer().extend(ClusterIcon,google.maps.OverlayView),this.styles_=t,this.padding_=r||0,this.cluster_=e,this.center_=null,this.map_=e.getMap(),this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(this.map_)}MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_="../images/m",MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_="png",MarkerClusterer.prototype.extend=function(e,t){return function(e){for(var t in e.prototype)this.prototype[t]=e.prototype[t];return this}.apply(e,[t])},MarkerClusterer.prototype.onAdd=function(){this.setReady_(!0)},MarkerClusterer.prototype.draw=function(){},MarkerClusterer.prototype.setupStyles_=function(){if(!this.styles_.length)for(var e,t=0;e=this.sizes[t];t++)this.styles_.push({url:this.imagePath_+(t+1)+"."+this.imageExtension_,height:e,width:e})},MarkerClusterer.prototype.fitMapToMarkers=function(){for(var e,t=this.getMarkers(),r=new google.maps.LatLngBounds,s=0;e=t[s];s++)r.extend(e.getPosition());this.map_.fitBounds(r)},MarkerClusterer.prototype.setStyles=function(e){this.styles_=e},MarkerClusterer.prototype.getStyles=function(){return this.styles_},MarkerClusterer.prototype.isZoomOnClick=function(){return this.zoomOnClick_},MarkerClusterer.prototype.isAverageCenter=function(){return this.averageCenter_},MarkerClusterer.prototype.getMarkers=function(){return this.markers_},MarkerClusterer.prototype.getTotalMarkers=function(){return this.markers_.length},MarkerClusterer.prototype.setMaxZoom=function(e){this.maxZoom_=e},MarkerClusterer.prototype.getMaxZoom=function(){return this.maxZoom_},MarkerClusterer.prototype.calculator_=function(e,t){for(var r=0,s=e.length,o=s;0!==o;)o=parseInt(o/10,10),r++;return{text:s,index:r=Math.min(r,t)}},MarkerClusterer.prototype.setCalculator=function(e){this.calculator_=e},MarkerClusterer.prototype.getCalculator=function(){return this.calculator_},MarkerClusterer.prototype.addMarkers=function(e,t){if(e.length)for(var r=0;s=e[r];r++)this.pushMarkerTo_(s);else if(Object.keys(e).length)for(var s in e)this.pushMarkerTo_(e[s]);t||this.redraw()},MarkerClusterer.prototype.pushMarkerTo_=function(e){if(e.isAdded=!1,e.draggable){var t=this;google.maps.event.addListener(e,"dragend",(function(){e.isAdded=!1,t.repaint()}))}this.markers_.push(e)},MarkerClusterer.prototype.addMarker=function(e,t){this.pushMarkerTo_(e),t||this.redraw()},MarkerClusterer.prototype.removeMarker_=function(e){var t=-1;if(this.markers_.indexOf)t=this.markers_.indexOf(e);else for(var r,s=0;r=this.markers_[s];s++)if(r==e){t=s;break}return-1!=t&&(e.setMap(null),this.markers_.splice(t,1),!0)},MarkerClusterer.prototype.removeMarker=function(e,t){var r=this.removeMarker_(e);return!(t||!r)&&(this.resetViewport(),this.redraw(),!0)},MarkerClusterer.prototype.removeMarkers=function(e,t){for(var r,s=e===this.getMarkers()?e.slice():e,o=!1,i=0;r=s[i];i++){var a=this.removeMarker_(r);o=o||a}if(!t&&o)return this.resetViewport(),this.redraw(),!0},MarkerClusterer.prototype.setReady_=function(e){this.ready_||(this.ready_=e,this.createClusters_())},MarkerClusterer.prototype.getTotalClusters=function(){return this.clusters_.length},MarkerClusterer.prototype.getMap=function(){return this.map_},MarkerClusterer.prototype.setMap=function(e){this.map_=e},MarkerClusterer.prototype.getGridSize=function(){return this.gridSize_},MarkerClusterer.prototype.setGridSize=function(e){this.gridSize_=e},MarkerClusterer.prototype.getMinClusterSize=function(){return this.minClusterSize_},MarkerClusterer.prototype.setMinClusterSize=function(e){this.minClusterSize_=e},MarkerClusterer.prototype.getExtendedBounds=function(e){var t=this.getProjection(),r=new google.maps.LatLng(e.getNorthEast().lat(),e.getNorthEast().lng()),s=new google.maps.LatLng(e.getSouthWest().lat(),e.getSouthWest().lng()),o=t.fromLatLngToDivPixel(r);o.x+=this.gridSize_,o.y-=this.gridSize_;var i=t.fromLatLngToDivPixel(s);i.x-=this.gridSize_,i.y+=this.gridSize_;var a=t.fromDivPixelToLatLng(o),n=t.fromDivPixelToLatLng(i);return e.extend(a),e.extend(n),e},MarkerClusterer.prototype.isMarkerInBounds_=function(e,t){return t.contains(e.getPosition())},MarkerClusterer.prototype.clearMarkers=function(){this.resetViewport(!0),this.markers_=[]},MarkerClusterer.prototype.resetViewport=function(e){for(var t,r=0;t=this.clusters_[r];r++)t.remove();var s;for(r=0;s=this.markers_[r];r++)s.isAdded=!1,e&&s.setMap(null);this.clusters_=[]},MarkerClusterer.prototype.repaint=function(){var e=this.clusters_.slice();this.clusters_.length=0,this.resetViewport(),this.redraw(),window.setTimeout((function(){for(var t,r=0;t=e[r];r++)t.remove()}),0)},MarkerClusterer.prototype.redraw=function(){this.createClusters_()},MarkerClusterer.prototype.distanceBetweenPoints_=function(e,t){if(!e||!t)return 0;var r=(t.lat()-e.lat())*Math.PI/180,s=(t.lng()-e.lng())*Math.PI/180,o=Math.sin(r/2)*Math.sin(r/2)+Math.cos(e.lat()*Math.PI/180)*Math.cos(t.lat()*Math.PI/180)*Math.sin(s/2)*Math.sin(s/2);return 6371*(2*Math.atan2(Math.sqrt(o),Math.sqrt(1-o)))},MarkerClusterer.prototype.addToClosestCluster_=function(e){for(var t,r=4e4,s=null,o=(e.getPosition(),0);t=this.clusters_[o];o++){var i=t.getCenter();if(i){var a=this.distanceBetweenPoints_(i,e.getPosition());a<r&&(r=a,s=t)}}s&&s.isMarkerInClusterBounds(e)?s.addMarker(e):((t=new Cluster(this)).addMarker(e),this.clusters_.push(t))},MarkerClusterer.prototype.createClusters_=function(){if(this.ready_)for(var e,t=new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),this.map_.getBounds().getNorthEast()),r=this.getExtendedBounds(t),s=0;e=this.markers_[s];s++)!e.isAdded&&this.isMarkerInBounds_(e,r)&&this.addToClosestCluster_(e)},Cluster.prototype.isMarkerAlreadyAdded=function(e){if(this.markers_.indexOf)return-1!=this.markers_.indexOf(e);for(var t,r=0;t=this.markers_[r];r++)if(t==e)return!0;return!1},Cluster.prototype.addMarker=function(e){if(this.isMarkerAlreadyAdded(e))return!1;if(this.center_){if(this.averageCenter_){var t=this.markers_.length+1,r=(this.center_.lat()*(t-1)+e.getPosition().lat())/t,s=(this.center_.lng()*(t-1)+e.getPosition().lng())/t;this.center_=new google.maps.LatLng(r,s),this.calculateBounds_()}}else this.center_=e.getPosition(),this.calculateBounds_();e.isAdded=!0,this.markers_.push(e);var o=this.markers_.length;if(o<this.minClusterSize_&&e.getMap()!=this.map_&&e.setMap(this.map_),o==this.minClusterSize_)for(var i=0;i<o;i++)this.markers_[i].setMap(null);return o>=this.minClusterSize_&&e.setMap(null),this.updateIcon(),!0},Cluster.prototype.getMarkerClusterer=function(){return this.markerClusterer_},Cluster.prototype.getBounds=function(){for(var e,t=new google.maps.LatLngBounds(this.center_,this.center_),r=this.getMarkers(),s=0;e=r[s];s++)t.extend(e.getPosition());return t},Cluster.prototype.remove=function(){this.clusterIcon_.remove(),this.markers_.length=0,delete this.markers_},Cluster.prototype.getSize=function(){return this.markers_.length},Cluster.prototype.getMarkers=function(){return this.markers_},Cluster.prototype.getCenter=function(){return this.center_},Cluster.prototype.calculateBounds_=function(){var e=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(e)},Cluster.prototype.isMarkerInClusterBounds=function(e){return this.bounds_.contains(e.getPosition())},Cluster.prototype.getMap=function(){return this.map_},Cluster.prototype.updateIcon=function(){var e=this.map_.getZoom(),t=this.markerClusterer_.getMaxZoom();if(t&&e>t)for(var r,s=0;r=this.markers_[s];s++)r.setMap(this.map_);else if(this.markers_.length<this.minClusterSize_)this.clusterIcon_.hide();else{var o=this.markerClusterer_.getStyles().length,i=this.markerClusterer_.getCalculator()(this.markers_,o);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.setSums(i),this.clusterIcon_.show()}},ClusterIcon.prototype.triggerClusterClick=function(){var e=this.cluster_.getMarkerClusterer();google.maps.event.trigger(e.map_,"clusterclick",this.cluster_),e.isZoomOnClick()&&this.map_.fitBounds(this.cluster_.getBounds())},ClusterIcon.prototype.onAdd=function(){if(this.div_=document.createElement("DIV"),this.visible_){var e=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(e),this.div_.innerHTML=this.sums_.text}this.getPanes().overlayMouseTarget.appendChild(this.div_);var t=this;google.maps.event.addDomListener(this.div_,"click",(function(){t.triggerClusterClick()}))},ClusterIcon.prototype.getPosFromLatLng_=function(e){var t=this.getProjection().fromLatLngToDivPixel(e);return t.x-=parseInt(this.width_/2,10),t.y-=parseInt(this.height_/2,10),t},ClusterIcon.prototype.draw=function(){if(this.visible_){var e=this.getPosFromLatLng_(this.center_);this.div_.style.top=e.y+"px",this.div_.style.left=e.x+"px"}},ClusterIcon.prototype.hide=function(){this.div_&&(this.div_.style.display="none"),this.visible_=!1},ClusterIcon.prototype.show=function(){if(this.div_){var e=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(e),this.div_.style.display=""}this.visible_=!0},ClusterIcon.prototype.remove=function(){this.setMap(null)},ClusterIcon.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),this.div_.parentNode.removeChild(this.div_),this.div_=null)},ClusterIcon.prototype.setSums=function(e){this.sums_=e,this.text_=e.text,this.index_=e.index,this.div_&&(this.div_.innerHTML=e.text),this.useStyle()},ClusterIcon.prototype.useStyle=function(){var e=Math.max(0,this.sums_.index-1);e=Math.min(this.styles_.length-1,e);var t=this.styles_[e];this.url_=t.url,this.height_=t.height,this.width_=t.width,this.textColor_=t.textColor,this.anchor_=t.anchor,this.textSize_=t.textSize,this.backgroundPosition_=t.backgroundPosition},ClusterIcon.prototype.setCenter=function(e){this.center_=e},ClusterIcon.prototype.createCss=function(e){var t=[];t.push("background-image:url("+this.url_+");");var r=this.backgroundPosition_?this.backgroundPosition_:"0 0";t.push("background-position:"+r+";"),"object"==typeof this.anchor_?("number"==typeof this.anchor_[0]&&this.anchor_[0]>0&&this.anchor_[0]<this.height_?t.push("height:"+(this.height_-this.anchor_[0])+"px; padding-top:"+this.anchor_[0]+"px;"):t.push("height:"+this.height_+"px; line-height:"+this.height_+"px;"),"number"==typeof this.anchor_[1]&&this.anchor_[1]>0&&this.anchor_[1]<this.width_?t.push("width:"+(this.width_-this.anchor_[1])+"px; padding-left:"+this.anchor_[1]+"px;"):t.push("width:"+this.width_+"px; text-align:center;")):t.push("height:"+this.height_+"px; line-height:"+this.height_+"px; width:"+this.width_+"px; text-align:center;");var s=this.textColor_?this.textColor_:"black",o=this.textSize_?this.textSize_:11;return t.push("cursor:pointer; top:"+e.y+"px; left:"+e.x+"px; color:"+s+"; position:absolute; font-size:"+o+"px; font-family:Arial,sans-serif; font-weight:bold"),t.join("")},window.MarkerClusterer=MarkerClusterer,MarkerClusterer.prototype.addMarker=MarkerClusterer.prototype.addMarker,MarkerClusterer.prototype.addMarkers=MarkerClusterer.prototype.addMarkers,MarkerClusterer.prototype.clearMarkers=MarkerClusterer.prototype.clearMarkers,MarkerClusterer.prototype.fitMapToMarkers=MarkerClusterer.prototype.fitMapToMarkers,MarkerClusterer.prototype.getCalculator=MarkerClusterer.prototype.getCalculator,MarkerClusterer.prototype.getGridSize=MarkerClusterer.prototype.getGridSize,MarkerClusterer.prototype.getExtendedBounds=MarkerClusterer.prototype.getExtendedBounds,MarkerClusterer.prototype.getMap=MarkerClusterer.prototype.getMap,MarkerClusterer.prototype.getMarkers=MarkerClusterer.prototype.getMarkers,MarkerClusterer.prototype.getMaxZoom=MarkerClusterer.prototype.getMaxZoom,MarkerClusterer.prototype.getStyles=MarkerClusterer.prototype.getStyles,MarkerClusterer.prototype.getTotalClusters=MarkerClusterer.prototype.getTotalClusters,MarkerClusterer.prototype.getTotalMarkers=MarkerClusterer.prototype.getTotalMarkers,MarkerClusterer.prototype.redraw=MarkerClusterer.prototype.redraw,MarkerClusterer.prototype.removeMarker=MarkerClusterer.prototype.removeMarker,MarkerClusterer.prototype.removeMarkers=MarkerClusterer.prototype.removeMarkers,MarkerClusterer.prototype.resetViewport=MarkerClusterer.prototype.resetViewport,MarkerClusterer.prototype.repaint=MarkerClusterer.prototype.repaint,MarkerClusterer.prototype.setCalculator=MarkerClusterer.prototype.setCalculator,MarkerClusterer.prototype.setGridSize=MarkerClusterer.prototype.setGridSize,MarkerClusterer.prototype.setMaxZoom=MarkerClusterer.prototype.setMaxZoom,MarkerClusterer.prototype.onAdd=MarkerClusterer.prototype.onAdd,MarkerClusterer.prototype.draw=MarkerClusterer.prototype.draw,Cluster.prototype.getCenter=Cluster.prototype.getCenter,Cluster.prototype.getSize=Cluster.prototype.getSize,Cluster.prototype.getMarkers=Cluster.prototype.getMarkers,ClusterIcon.prototype.onAdd=ClusterIcon.prototype.onAdd,ClusterIcon.prototype.draw=ClusterIcon.prototype.draw,ClusterIcon.prototype.onRemove=ClusterIcon.prototype.onRemove,Object.keys=Object.keys||function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t},dmx.Component("google-maps",{initialData:{zoom:10,maptype:"roadmap",latitude:null,longitude:null},attributes:{width:{type:[String,Number],default:"100%"},height:{type:[String,Number],default:400},latitude:{type:Number,default:null},longitude:{type:Number,default:null},address:{type:String,default:null},zoom:{type:Number,default:10},maptype:{type:String,default:"roadmap",enum:["roadmap","satellite","hybrid","terrain"]},scrollwheel:{type:Boolean,default:!1},tilt:{type:Boolean,default:!1},rotateControl:{type:Boolean,default:!1},scaleControl:{type:Boolean,default:!1},fullscreenControl:{type:Boolean,default:!1},zoomControl:{type:Boolean,default:!1},streetviewControl:{type:Boolean,default:!1},maptypeControl:{type:Boolean,default:!1},enableClusters:{type:Boolean,default:!1},trafficLayer:{type:Boolean,default:!1},transitLayer:{type:Boolean,default:!1},bicyclingLayer:{type:Boolean,default:!1},markers:{type:Array,default:null},markerId:{type:String,default:"id"},markerLatitude:{type:String,default:"latitude"},markerLongitude:{type:String,default:"longitude"},markerAddress:{type:String,default:"address"},markerLabel:{type:String,default:"label"},markerLabelColor:{type:String,default:"labelColor"},markerTitle:{type:String,default:"title"},markerInfo:{type:String,default:"info"},markerType:{type:String,default:"type"},markerImage:{type:String,default:"image"},markerAnimation:{type:String,default:"animation"},markerDraggable:{type:String,default:"draggable"},clusterGridSize:{type:Number,default:60},clusterMaxZoom:{type:Number,default:null},minClusterSize:{type:Number,default:2}},methods:{addMarker(e){const t=this._addMarker(e);this._cluster&&this.props.enableClusters?this._cluster.addMarker(t):t.setMap(this._map)},goToMarker(e){const t=this._findMarker(e);t&&this._map.setCenter(t.position)},panToMarker(e){const t=this._findMarker(e);t&&this._map.panTo(t.position)},bounceMarker(e){const t=this._findMarker(e);t&&t.setAnimation(1)},stopBounce(e){const t=this._findMarker(e);t&&t.setAnimation(null)},showInfo(e){const t=this._findMarker(e);t&&t.info&&this._openInfoWindow(t,t.info)},fitBoundsToMarkers(){if(this._markers.length){const e=new google.maps.LatLngBounds;for(let t=0;t<this._markers.length;t++)e.extend(this._markers[t].getPosition());this._map.fitBounds(e)}},removeAllMarkers(){this._removeAllMarkers()},panTo(e,t){this._map.panTo({lat:+e,lng:+t})},setCenter(e,t){this._map.setCenter({lat:+e,lng:+t})},setMapType(e){this._map.setMapTypeId(e)},setZoom(e){this._map.setZoom(e)},refresh(){google.maps.event.trigger(this._map,"resize")},reload(){this._relaod()}},events:{ready:Event,boundschanged:Event,centerchanged:Event,maptypechanged:Event,zoomchanged:Event,mapclick:Event,markerclick:Event,markerpositionchanged:Event},init(){const e="https://maps.google.com/mapfiles/",t="https://maps.google.com/intl/en_us/mapfiles/ms/micons/";this._geocodeCache=JSON.parse(localStorage.geocodeCache||"{}"),this._geocoder=new google.maps.Geocoder,this._infoWindow=new google.maps.InfoWindow,this._markers=[],this._markerTypes={black:e+"marker_black.png",grey:e+"marker_grey.png",orange:e+"marker_orange.png",white:e+"marker_white.png",yellow:e+"marker_yellow.png",purple:e+"marker_purple.png",green:e+"marker_green.png",start:e+"dd-start.png",end:e+"dd-end.png",tree:t+"tree.png",lodging:t+"lodging.png",bar:t+"bar.png",restaurant:t+"restaurant.png",horsebackriding:t+"horsebackriding.png",convienancestore:t+"convienancestore.png",hiker:t+"hiker.png",swimming:t+"swimming.png",fishing:t+"fishing.png",golfer:t+"golfer.png",sportvenue:t+"sportvenue.png"},this._clickHandler=this._clickHandler.bind(this),this._boundsHandler=dmx.debounce(this._boundsHandler.bind(this),100),this._centerHandler=dmx.debounce(this._centerHandler.bind(this),100),this._maptypeHandler=dmx.debounce(this._maptypeHandler.bind(this),100),this._zoomHandler=dmx.debounce(this._zoomHandler.bind(this),100)},render(e){this.$parse(),e.style.setProperty("display","block"),e.style.setProperty("width",this._getSize(this.props.width)),e.style.setProperty("height",this._getSize(this.props.height)),this._map=new google.maps.Map(e,{zoom:+this.props.zoom,center:{lat:+this.props.latitude,lng:+this.props.longitude},mapTypeId:this.props.maptype,scrollwheel:this.props.scrollwheel,scaleControl:this.props.scaleControl,zoomControl:this.props.zoomControl,panControl:this.props.panControl,streetViewControl:this.props.streetviewControl,mapTypeControl:this.props.maptypeControl,rotateControl:this.props.rotateControl,fullscreenControl:this.props.fullscreenControl}),window.googleMapsTheme&&this._map.setOptions({styles:window.googleMapsTheme}),this.props.tilt&&this._map.setTilt(45),this._getMarkers(),this.props.enableClusters&&(this._cluster=new MarkerClusterer(this._map,this._markers,{imagePath:this._getImageFolder(),gridSize:this.props.clusterGridSize,minimumClusterSize:this.props.minClusterSize,maxZoom:this.props.clusterMaxZoom})),this.props.latitude&&this.props.longitude||!this.props.address||this._geocode(this.props.address),this.props.trafficLayer&&(this._trafficLayer=new google.maps.TrafficLayer,this._trafficLayer.setMap(this._map)),this.props.transitLayer&&(this._transitLayer=new google.maps.TransitLayer,this._transitLayer.setMap(this._map)),this.props.bicyclingLayer&&(this._bikeLayer=new google.maps.BicyclingLayer,this._bikeLayer.setMap(this._map)),this._map.addListener("click",this._clickHandler),this._map.addListener("bounds_changed",this._boundsHandler),this._map.addListener("center_changed",this._centerHandler),this._map.addListener("maptypeid_changed",this._maptypeHandler),this._map.addListener("zoom_changed",this._zoomHandler),this.set("latitude",+this.props.latitude),this.set("longitude",+this.props.longitude),this.set("maptype",this._map.getMapTypeId()),this.set("zoom",this._map.getZoom()),setTimeout((()=>{this.dispatchEvent("ready")}),100)},performUpdate(e){if((e.has("latitude")||e.has("longitude"))&&this._map.setCenter({lat:+this.props.latitude,lng:+this.props.longitude}),e.has("address")&&this._geocode(this.props.address),e.has("zoom")&&this._map.setZoom(this.props.zoom),e.has("maptype")&&this._map.setMapTypeId(this.props.maptype),e.has("tilt")&&this._map.setTilt(this.props.tilt?45:0),e.has("scrollwheel")&&this._map.setOptions({scrollwheel:this.props.scrollwheel}),e.has("scaleControl")&&this._map.setOptions({scaleControl:this.props.scaleControl}),e.has("zoomControl")&&this._map.setOptions({zoomControl:this.props.zoomControl}),e.has("panControl")&&this._map.setOptions({panControl:this.props.panControl}),e.has("streetviewControl")&&this._map.setOptions({streetViewControl:this.props.streetviewControl}),e.has("maptypeControl")&&this._map.setOptions({mapTypeControl:this.props.maptypeControl}),e.has("rotateControl")&&this._map.setOptions({rotateControl:this.props.rotateControl}),e.has("fullscreenControl")&&this._map.setOptions({fullscreenControl:this.props.fullscreenControl}),e.has("trafficLayer")&&(this._trafficLayer=this._trafficLayer||new google.maps.TrafficLayer,this._trafficLayer.setMap(this.props.trafficLayer?this._map:null)),e.has("trasitLayer")&&(this._transitLayer=this._transitLayer||new google.maps.TransitLayer,this._transitLayer.setMap(this.props.transitLayer?this._map:null)),e.has("bicycleLayer")&&(this._bikeLayer=this._bikeLayer||new google.maps.BicyclingLayer,this._bikeLayer.setMap(this.props.bicyclingLayer?this._map:null)),e.has("markers")){this._removeAllMarkers();const e=dmx.repeatItems(this.props.markers);if(Array.isArray(e)){for(let t of e){const e=dmx.DataScope(t,this.parent);this._addMarker({id:dmx.parse(this.props.markerId,e),latitude:+dmx.parse(this.props.markerLatitude,e),longitude:+dmx.parse(this.props.markerLongitude,e),address:dmx.parse(this.props.markerAddress,e),label:dmx.parse(this.props.markerLabel,e),labelColor:dmx.parse(this.props.markerLabelColor,e),title:dmx.parse(this.props.markerTitle,e),info:dmx.parse(this.props.markerInfo,e),type:dmx.parse(this.props.markerType,e),image:dmx.parse(this.props.markerImage,e),animation:dmx.parse(this.props.markerAnimation,e),draggable:!!dmx.parse(this.props.markerDraggable,e)})}this.props.enableClusters&&(this._cluster=new MarkerClusterer(this._map,this._markers,{imagePath:this._getImageFolder(),gridSize:this.props.clusterGridSize,minimumClusterSize:this.props.minClusterSize,maxZoom:this.props.clusterMaxZoom}))}}},destroy(){},_reload(){this.performUpdate(new Map([["latitude",1],["longitude",1],["address",1],["zoom",1],["maptype",1],["tilt",1],["scrollwheel",1],["scaleControl",1],["zoomControl",1],["panControl",1],["streetviewControl",1],["maptypeControl",1],["rotateControl",1],["fullscreenControl",1],["trafficLayer",1],["trasitLayer",1],["bicycleLayer",1],["markers",1]]))},_getSize:e=>"string"==typeof e&&"%"==e.slice(-1)?e:parseInt(e,10)+"px",_getImageFolder(){const e=document.querySelector('script[src$="dmxGoogleMaps.js"]');return e?e.src.replace(/dmxGoogleMaps.js$/,"images/m"):"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m"},_getMarkerAnimation(e){switch(e.toLowerCase()){case"bounce":return 1;case"drop":return 2}return null},_geocode(e){e&&(this._geocodeCache[e]?this._map.setCenter(this._geocodeCache[e]):this._geocoder.geocode({address:e},((t,r)=>{"OK"==r?(this._geocodeCache[e]=t[0].geometry.location,this._map.setCenter(this._geocodeCache[e]),localStorage.geocodeCache=JSON.stringify(this._geocodeCache)):console.warn(`Geocode was not successful for the following reason: ${r}`)})))},_openInfoWindow(e,t){this._infoWindow.setContent(t),this._infoWindow.open(this._map,e)},_getMarkers(){for(let e of this.children)e instanceof dmx.Component("google-maps-marker")&&(e._marker=this._addMarker({static:!0,id:e.name,latitude:+e.props.latitude,longitude:+e.props.longitude,address:e.props.address,label:e.props.label,labelColor:e.props.labelColor,title:e.props.title,info:e.props.info,type:e.props.type,image:e.props.image,animations:e.props.animation,draggable:e.props.draggable}))},_findMarker(e){return this._markers.find((t=>t.id==e))},_addMarker(e){const t=new google.maps.Marker({static:!!e.static,position:{lat:+e.latitude,lng:+e.longitude},label:e.label,title:e.title,icon:this._markerTypes[e.type],draggable:e.draggable});return e.id&&(t.id=e.id),e.image&&t.setIcon(e.image),e.label&&e.labelColor&&t.setLabel({color:e.labelColor,text:e.label}),e.info&&(t.info=e.info,t.addListener("click",(r=>{this._openInfoWindow(t,e.info)}))),e.animation&&t.setAnimation(this._getMarkerAnimation(e.animation)),e.latitude&&e.longitude||(e.address?this._geocodeCache[e.address]?t.setPosition(this._geocodeCache[e.address]):this._geocoder.geocode({address:e.address},((r,s)=>{"OK"==s?(this._geocodeCache[e.address]=r[0].geometry.location,t.setPosition(this._geocodeCache[e.address]),t.setVisible(!0),localStorage.geocodeCache=JSON.stringify(this._geocodeCache)):console.warn(`Geocode was not successful for the following reason: ${s}`)})):t.setVisible(!1)),this._map&&!this.props.enableClusters&&t.setMap(this._map),t.addListener("click",this._markerClickHandler.bind(this,t)),t.addListener("position_changed",this._markerPositionHandler.bind(this,t)),this._markers.push(t),t},_removeAllMarkers(){this._cluster&&this._cluster.clearMarkers(),this._markers=this._markers.filter((e=>!!e.static||(google.maps.event.clearInstanceListeners(e),e.setMap(null),!1)))},_clickHandler(e){this.dispatchEvent("mapclick",null,{latitude:e.latLng.lat(),longitude:e.latLng.lng(),position:e.latLng.toJSON()})},_boundsHandler(e){this.dispatchEvent("boundschanged")},_centerHandler(e){const t=this._map.getCenter();this.set("latitude",t.lat()),this.set("longitude",t.lng()),this.dispatchEvent("centerchanged")},_maptypeHandler(e){this.set("maptype",this._map.getMapTypeId()),this.dispatchEvent("maptypechanged")},_zoomHandler(e){this.set("zoom",this._map.getZoom()),this.dispatchEvent("zoomchanged")},_markerClickHandler(e){this.dispatchEvent("markerclick",null,{id:e.id})},_markerPositionHandler(e){this.dispatchEvent("markerpositionchanged",null,{id:e.id,latitude:e.position.lat(),longitude:e.position.lng(),position:e.position.toJSON()})}}),dmx.Component("google-maps-marker",{attributes:{latitude:{type:Number,default:null},longitude:{type:Number,default:null},address:{type:String,default:null},label:{type:String,default:null},labelColor:{type:String,default:null},title:{type:String,default:null},info:{type:String,default:null},type:{type:String,default:null},image:{type:String,default:null},animation:{type:String,default:null},draggable:{type:Boolean,default:!1}},render:!1,performUpdate(e){(e.has("latitude")||e.has("longitude"))&&(this._marker.setPosition({lat:+this.props.latitude,lng:+this.props.longitude}),this._marker.setVisible(!0)),e.has("address")&&(this.parent._geocodeCache[this.props.address]?this._marker.setPosition(this.parent._geocodeCache[this.props.address]):this.parent._geocoder.geocode({address:this.props.address},((e,t)=>{if("OK"==t){const t=e[0].geometry.location;this.parent._geocodeCache[this.props.address]=t,this._marker.setPosition(t),this._marker.setVisible(!0),localStorage.geocodeCache=JSON.stringify(this.parent._geocodeCache)}else console.warn(`Geocode was not successful for the following reason: ${t}`)}))),(e.has("label")||e.has("labelColor"))&&this._marker.setLabel({color:this.props.labelColor,text:this.props.label}),e.has("title")&&this._marker.setTitle(this.props.title),e.has("info")&&(this._marker.infoWindow=new google.maps.infoWindow({content:this.props.info})),e.has("type")&&this._marker.setIcon(this.parent._markerTypes[this.props.type]),e.has("image")&&this._marker.setIcon(this.props.image),e.has("animation")&&this._marker.setAnimation(this.parent._getMarkerAnimation(this.props.animation)),e.has("draggable")&&this._marker.setDraggable(this.props.draggable)}});
//# sourceMappingURL=dmxGoogleMaps.js.map
